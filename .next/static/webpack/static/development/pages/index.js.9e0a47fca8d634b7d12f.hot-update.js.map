{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.9e0a47fca8d634b7d12f.hot-update.js","sources":["webpack:///./components/LocalStorageHandler.js"],"sourcesContent":["/*\r\nUma classe para trabalhar com LocalStorage\r\n*/\r\nexport default class LocalStorageHandler {\r\n\tstatic _ls = null;\r\n\r\n\tstatic _key = null;\r\n\r\n\tconstructor() {}\r\n\r\n\t//static _ls = localStorage;\r\n\t/**\r\n\t * @method get\r\n\t * @param key {String} Item key\r\n\t * @return {String|Object|Null}\r\n\t */\r\n\tstatic get(key) {\r\n\t\ttry {\r\n\t\t\treturn JSON.parse(this._ls.getItem(key));\r\n\t\t} catch (e) {\r\n\t\t\treturn this._ls.getItem(key);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @method set\r\n\t * @param key {String} Item key\r\n\t * @param val {String|Object} Item value\r\n\t * @return {String|Object} The value of the item just set\r\n\t */\r\n\tstatic set(key, val) {\r\n\t\tthis._ls.setItem(key, JSON.stringify(val));\r\n\t\treturn this.get(key);\r\n\t}\r\n\r\n\t/**\r\n\t * @method key\r\n\t * @param index {Number} Item index\r\n\t * @return {String|Null} The item key if found, null if not\r\n\t */\r\n\r\n\tstatic key(index) {\r\n\t\tif (typeof index === 'number') {\r\n\t\t\treturn this._ls.key(index);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @method data\r\n\t * @return {Array|Null} An array containing all items in localStorage through key{string}-value{String|Object} pairs\r\n\t */\r\n\tstatic data() {\r\n\t\tvar i = 0;\r\n\t\tvar data = [];\r\n\r\n\t\twhile (this._ls.key(i)) {\r\n\t\t\tdata[i] = [this._ls.key(i), this.get(this._ls.key(i))];\r\n\t\t\ti++;\r\n\t\t}\r\n\r\n\t\treturn data.length ? data : null;\r\n\t}\r\n\r\n\tstatic getDataByKey(key) {\r\n\t\ttry {\r\n\t\t\tthis._key = key;\r\n\t\t\tlet data = localStorage.getItem(key);\r\n\r\n\t\t\tif (data === null) {\r\n\t\t\t\treturn 'KEY_NOT_EXISTS';\r\n\t\t\t}\r\n\t\t\treturn JSON.parse(data);\r\n\t\t} catch (e) {\r\n\t\t\treturn e;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic count(key) {\r\n\t\ttry {\r\n\t\t\tlet data = localStorage.getItem(key);\r\n\r\n\t\t\tif (data === null) {\r\n\t\t\t\treturn 'KEY_NOT_EXISTS';\r\n\t\t\t}\r\n\t\t\treturn parseInt(JSON.parse(data).length);\r\n\t\t} catch (e) {\r\n\t\t\treturn e;\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @method remove\r\n\t * @param keyOrIndex {String|Number} Item key or index (which will be converted to key anyway)\r\n\t * @return {Boolean} True if the key was found before deletion, false if not\r\n\t */\r\n\r\n\tstatic remove(keyOrIndex) {\r\n\t\tvar result = false;\r\n\t\tvar key = typeof keyOrIndex === 'number' ? this.key(keyOrIndex) : keyOrIndex;\r\n\r\n\t\tif (key in this._ls) {\r\n\t\t\tresult = true;\r\n\t\t\tthis._ls.removeItem(key);\r\n\t\t}\r\n\r\n\t\treturn result;\r\n\t}\r\n\r\n\t/**\r\n\t * @method clear\r\n\t * @return {Number} The total of items removed\r\n\t */\r\n\tstatic clear() {\r\n\t\tvar len = this._ls.length;\r\n\t\tthis._ls.clear();\r\n\t\treturn len;\r\n\t}\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA;;;AAKA;AAAA;AAAA;AACA;AAEA;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;;;;AAjHA;AACA;AADA;AACA;;;;;A","sourceRoot":""}