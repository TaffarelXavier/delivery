{"version":3,"file":"static/webpack/static\\development\\pages\\index.js.88114606a49d13c19550.hot-update.js","sources":["webpack:///./components/LocalStorageHandler.js"],"sourcesContent":["/*\r\nUma classe para trabalhar com LocalStorage\r\n*/\r\nexport default class LocalStorageHandler {\r\n\r\n  static _ls =  null;\r\n\r\n  constructor() {}\r\n\r\n  \r\n  //static _ls = localStorage;\r\n  /**\r\n   * @method get\r\n   * @param key {String} Item key\r\n   * @return {String|Object|Null}\r\n   */\r\n  static get(key) {\r\n    try {\r\n      return JSON.parse(this._ls.getItem(key));\r\n    } catch (e) {\r\n      return this._ls.getItem(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @param key {String} Item key\r\n   * @param val {String|Object} Item value\r\n   * @return {String|Object} The value of the item just set\r\n   */\r\n  static set(key, val) {\r\n    this._ls.setItem(key, JSON.stringify(val));\r\n    return this.get(key);\r\n  }\r\n\r\n  /**\r\n   * @method key\r\n   * @param index {Number} Item index\r\n   * @return {String|Null} The item key if found, null if not\r\n   */\r\n\r\n  static key(index) {\r\n    if (typeof index === \"number\") {\r\n      return this._ls.key(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method data\r\n   * @return {Array|Null} An array containing all items in localStorage through key{string}-value{String|Object} pairs\r\n   */\r\n  static data() {\r\n    var i = 0;\r\n    var data = [];\r\n\r\n    while (this._ls.key(i)) {\r\n      data[i] = [this._ls.key(i), this.get(this._ls.key(i))];\r\n      i++;\r\n    }\r\n\r\n    return data.length ? data : null;\r\n  }\r\n\r\n  static getDataByKey(key) {\r\ntry{\r\n let data = localStorage.getItem(key);\r\n\r\n   if ( data === null) {\r\n\treturn \"KEY_NOT_EXISTS\";\r\n   }\r\n\treturn JSON.parse(data);\r\n}\r\ncatch(e){\r\nreturn e;\r\n}   \r\n \r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @method remove\r\n   * @param keyOrIndex {String|Number} Item key or index (which will be converted to key anyway)\r\n   * @return {Boolean} True if the key was found before deletion, false if not\r\n   */\r\n\r\n  static remove(keyOrIndex) {\r\n    var result = false;\r\n    var key =\r\n      typeof keyOrIndex === \"number\" ? this.key(keyOrIndex) : keyOrIndex;\r\n\r\n    if (key in this._ls) {\r\n      result = true;\r\n      this._ls.removeItem(key);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @method clear\r\n   * @return {Number} The total of items removed\r\n   */\r\n  static clear() {\r\n    var len = this._ls.length;\r\n    this._ls.clear();\r\n    return len;\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAAA;;;AAGA;;;AAIA;AAAA;AAAA;AACA;AAGA;;;;;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;;;;;;;;AAMA;AACA;AACA;AAAA;AACA;AAEA;;;;;;;;AAMA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AACA;AAEA;AAIA;;;;;;;;AAMA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;;;;;;;AAIA;AACA;AACA;AAAA;AACA;AAAA;AACA;;;;;;AAxGA;AACA;;;;;A","sourceRoot":""}