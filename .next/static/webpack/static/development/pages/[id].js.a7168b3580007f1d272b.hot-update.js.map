{"version":3,"file":"static/webpack/static\\development\\pages\\[id].js.a7168b3580007f1d272b.hot-update.js","sources":["webpack:///./components/Produtos/index.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Input from \"@material-ui/core/Input\";\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport ButtonGroup from \"@material-ui/core/ButtonGroup\";\r\nimport Chip from \"@material-ui/core/Chip\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport LazyLoad from \"react-lazyload\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  input: {\r\n    marginLeft: 8,\r\n    flex: 1,\r\n    borderRadius: 15,\r\n    padding: 15\r\n  },\r\n  content: {\r\n    flex: \"1 0 auto\"\r\n  },\r\n  listaProdutos: {\r\n    boxShadow:\r\n      \"0px 1px 3px 0px rgba(0,0,0,0.2), 0px 1px 1px 0px rgba(0,0,0,0.14), 0px 2px 1px -1px rgba(0,0,0,0.12);\",\r\n    display: \"flex\",\r\n    flexWrap: \"nowrap\",\r\n    border: \"0px solid red\",\r\n    flexDirection: \"row\",\r\n    height: 160,\r\n    marginTop: 10,\r\n    backgroundColor: \"rgba(245,245,245,0.8)\"\r\n  },\r\n  itemAvatar: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"20%\",\r\n      display: \"flex\",\r\n      flexWrap: \"nowrap\",\r\n      flexDirection: \"row\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      border: \"0px solid lime\",\r\n      padding: 4\r\n    },\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      \r\n    }\r\n  },\r\n  itemAvatarImg: {\r\n    [theme.breakpoints.up(\"sm\")]: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      display: \"flex\",\r\n      flexWrap: \"nowrap\",\r\n      flexDirection: \"row\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      border: \"0px solid lime\"\r\n    },\r\n    [theme.breakpoints.up(\"xs\")]: {\r\n      width: \"100%\",\r\n      height: \"100%\",\r\n      display: \"flex\",\r\n      flexWrap: \"nowrap\",\r\n      flexDirection: \"row\",\r\n      justifyContent: \"center\",\r\n      alignItems: \"center\",\r\n      border: \"0px solid lime\"\r\n    }\r\n  },\r\n  itemContent: {\r\n    width: \"60%\",\r\n    display: \"flex\",\r\n    flexWrap: \"nowrap\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"flex-start\",\r\n    alignContent: \"flex-start\",\r\n    alignItems: \"flex-start\",\r\n    border: \"0px solid lime\",\r\n    padding: 10\r\n  },\r\n  itemAcoes: {\r\n    width: \"20%\",\r\n    display: \"flex\",\r\n    flexWrap: \"nowrap\",\r\n    flexDirection: \"column\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    border: \"0px solid lime\",\r\n    padding: 10,\r\n    textAlign: \"center\"\r\n  },\r\n  inputQuantidade: {\r\n    border: 0,\r\n    outline: 0,\r\n    textAlign: \"center\",\r\n    width: 40\r\n  }\r\n}));\r\n\r\n/**\r\n * Component: Produtos\r\n */\r\nexport default function Produtos(props) {\r\n  \r\n  const [quantidade, setQuantidade] = useState(0);\r\n  const [valorTotal, setValorTotal] = useState(0);\r\n  const [observacao, setObservacao] = useState(\"\");\r\n\r\n  function addProduct() {\r\n\r\n    let products = [];\r\n\r\n    if (localStorage.getItem(\"products\")) {\r\n      products = JSON.parse(localStorage.getItem(\"products\"));\r\n    }\r\n\r\n    //Desestruturação Javascript\r\n    const { id, nome, imagem, precoUnitario, descricao } = props;\r\n\r\n    //Pega o index\r\n    let objIndex = products.findIndex(pedido => pedido.productId === id);\r\n\r\n    //Caso não exista\r\n    if (objIndex === -1) {\r\n      products.push({\r\n        productId: id,\r\n        nome: nome,\r\n        imagem: imagem,\r\n        quantidade: quantidade + 1,\r\n        observacao: observacao,\r\n        preco: precoUnitario,\r\n        descricao: descricao\r\n      });\r\n\r\n      localStorage.setItem(\"products\", JSON.stringify(products));\r\n    } else {\r\n      products[objIndex].productId = id;\r\n      products[objIndex].quantidade = quantidade + 1;\r\n      products[objIndex].observacao = observacao;\r\n      products[objIndex].nome = nome;\r\n      products[objIndex].imagem = imagem;\r\n      products[objIndex].preco = precoUnitario;\r\n      products[objIndex].descricao = descricao;\r\n      localStorage.setItem(\"products\", JSON.stringify(products));\r\n    }\r\n  }\r\n\r\n  function add() {\r\n    let quant = parseInt(quantidade) + 1;\r\n\r\n    setQuantidade(quant);\r\n\r\n    addProduct();\r\n\r\n    setValorTotal((props.precoUnitario * quant).toFixed(2));\r\n  }\r\n\r\n  function subtract() {\r\n    let quant = parseInt(quantidade) - 1;\r\n\r\n    setQuantidade(quant);\r\n\r\n    addProduct();\r\n\r\n    setValorTotal(props.precoUnitario * quant);\r\n  }\r\n\r\n  function onChangeQuantidade(ev) {\r\n    let quant = parseInt(ev.target.value);\r\n\r\n    setQuantidade(quant);\r\n\r\n    addProduct();\r\n\r\n    setValorTotal((props.precoUnitario * parseInt(quant)).toFixed(2));\r\n  }\r\n\r\n  function alterarTextoTextArea(ev) {\r\n    setObservacao(ev.target.value);\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (quantidade <= 0 || isNaN(parseInt(quantidade))) {\r\n      setValorTotal(0);\r\n      setQuantidade(0);\r\n    }\r\n    props.callbackParent(quantidade);\r\n  }, [quantidade]);\r\n\r\n  const classes = useStyles();\r\n  return (\r\n    <div className={classes.root} id={props.id}>\r\n      <Grid container spacing={2}>\r\n        <Grid item xs={12} md={12}>\r\n          <div className={classes.demo}>\r\n            <div\r\n              className={classes.listaProdutos}\r\n              title={\"Clique para entrar em \" + props.nome}\r\n            >\r\n              <div className={classes.itemAvatar}>\r\n                {props.imagem ? (\r\n                  <LazyLoad height={200}>\r\n                    <img\r\n                      className={classes.itemAvatarImg}\r\n                      alt=\"\"\r\n                      src={props.imagem}\r\n                    />\r\n                  </LazyLoad>\r\n                ) : (\r\n                  <div>b</div>\r\n                )}\r\n              </div>\r\n              <div className={classes.itemContent}>\r\n                <Typography>\r\n                  <b>{props.nome}</b>\r\n                </Typography>\r\n                <Grid container wrap=\"nowrap\" title={props.descricao}>\r\n                  <Grid item xs zeroMinWidth>\r\n                    <Typography noWrap>{props.descricao}</Typography>\r\n                  </Grid>\r\n                </Grid>\r\n                <sub>\r\n                  <strong>Kg</strong>\r\n                </sub>\r\n                <br />\r\n                {observacao.length === 0 && <br />}\r\n                <Grid container wrap=\"nowrap\">\r\n                  <FormControl fullWidth>\r\n                    <InputLabel htmlFor=\"my-input\">Observação:</InputLabel>\r\n                    <Input\r\n                      id=\"my-input\"\r\n                      onChange={ev => {\r\n                        alterarTextoTextArea(ev);\r\n                      }}\r\n                      value={observacao}\r\n                      aria-describedby=\"my-helper-text\"\r\n                    />\r\n                  </FormControl>\r\n                </Grid>\r\n              </div>\r\n              <div className={classes.itemAcoes}>\r\n                <br />\r\n                <Typography>\r\n                  A partir de <br /> <b>R$ {props.precoUnitario.toFixed(2)}</b>\r\n                </Typography>\r\n                <small>Quantidade:</small>\r\n                <ButtonGroup\r\n                  disableFocusRipple={true}\r\n                  size=\"small\"\r\n                  variant=\"contained\"\r\n                  color=\"primary\"\r\n                  aria-label=\"Split button\"\r\n                >\r\n                  <Button onClick={subtract} disabled={quantidade < 1}>\r\n                    -\r\n                  </Button>\r\n                  <input\r\n                    type=\"number\"\r\n                    onChange={ev => onChangeQuantidade(ev)}\r\n                    value={quantidade}\r\n                    className={classes.inputQuantidade}\r\n                  />\r\n                  <Button\r\n                    color=\"primary\"\r\n                    variant=\"contained\"\r\n                    size=\"small\"\r\n                    aria-haspopup=\"true\"\r\n                    value=\"+\"\r\n                    onClick={add}\r\n                  >\r\n                    +\r\n                  </Button>\r\n                </ButtonGroup>\r\n                <br />\r\n                <Chip\r\n                  className={classes.chip}\r\n                  color=\"primary\"\r\n                  label={`SubTotal ${\"\\n\\n\"}R$ ${valorTotal}`}\r\n                />\r\n                <br />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </Grid>\r\n      </Grid>\r\n    </div>\r\n  );\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AADA;AACA;AACA;AACA;AACA;AACA;AAJA;AAMA;AACA;AADA;AAGA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAcA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AARA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AATA;AAWA;AACA;AACA;AACA;AACA;AAJA;AAhFA;AAAA;AAwsourceRoot":""}