{"ast":null,"code":"import _parseInt from \"@babel/runtime-corejs2/core-js/parse-int\";\nimport _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/*\r\nUma classe para trabalhar com LocalStorage\r\n*/\nvar LocalStorageHandler =\n/*#__PURE__*/\nfunction () {\n  function LocalStorageHandler() {\n    _classCallCheck(this, LocalStorageHandler);\n  } //static _ls = localStorage;\n\n  /**\r\n   * @method get\r\n   * @param key {String} Item key\r\n   * @return {String|Object|Null}\r\n   */\n\n\n  _createClass(LocalStorageHandler, null, [{\n    key: \"get\",\n    value: function get(key) {\n      try {\n        return JSON.parse(this._ls.getItem(key));\n      } catch (e) {\n        return this._ls.getItem(key);\n      }\n    }\n    /**\r\n     * @method set\r\n     * @param key {String} Item key\r\n     * @param val {String|Object} Item value\r\n     * @return {String|Object} The value of the item just set\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      this._ls.setItem(key, _JSON$stringify(val));\n\n      return this.get(key);\n    }\n    /**\r\n     * @method key\r\n     * @param index {Number} Item index\r\n     * @return {String|Null} The item key if found, null if not\r\n     */\n\n  }, {\n    key: \"key\",\n    value: function key(index) {\n      if (typeof index === 'number') {\n        return this._ls.key(index);\n      }\n    }\n    /**\r\n     * @method data\r\n     * @return {Array|Null} An array containing all items in localStorage through key{string}-value{String|Object} pairs\r\n     */\n\n  }, {\n    key: \"data\",\n    value: function data() {\n      var i = 0;\n      var data = [];\n\n      while (this._ls.key(i)) {\n        data[i] = [this._ls.key(i), this.get(this._ls.key(i))];\n        i++;\n      }\n\n      return data.length ? data : null;\n    }\n  }, {\n    key: \"getDataByKey\",\n    value: function getDataByKey(key) {\n      try {\n        this._key = key;\n        var data = localStorage.getItem(key);\n\n        if (data === null) {\n          return 0;\n        }\n\n        return JSON.parse(data);\n      } catch (e) {\n        return e;\n      }\n    }\n  }, {\n    key: \"count\",\n    value: function count(key) {\n      try {\n        var data = localStorage.getItem(key);\n\n        if (data === null) {\n          return 0;\n        }\n\n        return _parseInt(JSON.parse(data).length);\n      } catch (e) {\n        return e;\n      }\n    }\n    /**\r\n     * @method remove\r\n     * @param keyOrIndex {String|Number} Item key or index (which will be converted to key anyway)\r\n     * @return {Boolean} True if the key was found before deletion, false if not\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(keyOrIndex) {\n      var result = false;\n      var key = typeof keyOrIndex === 'number' ? this.key(keyOrIndex) : keyOrIndex;\n      var data = localStorage;\n\n      if (data === null) {\n        return 'KEY_NOT_EXISTS';\n      }\n\n      if (key in localStorage) {\n        result = true;\n        localStorage.removeItem(key);\n      }\n\n      return result;\n    }\n    /**\r\n     * \r\n     * @param {*} keyOrIndex \r\n     * @param {*} key \r\n     */\n\n  }, {\n    key: \"removeByIdInArray\",\n    value: function removeByIdInArray(keyOrIndex, key) {\n      var data = localStorage.getItem(key);\n\n      if (data === null) {\n        return 'KEY_NOT_EXISTS';\n      }\n\n      var storageProducts = JSON.parse(localStorage.getItem(key));\n      var products = storageProducts.filter(function (product) {\n        return product.productId !== keyOrIndex;\n      });\n      localStorage.setItem(key, _JSON$stringify(products));\n      return products;\n    }\n    /**\r\n     * @method clear\r\n     * @return {Number} The total of items removed\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var len = this._ls.length;\n\n      this._ls.clear();\n\n      return len;\n    }\n  }]);\n\n  return LocalStorageHandler;\n}();\n\n_defineProperty(LocalStorageHandler, \"_ls\", null);\n\n_defineProperty(LocalStorageHandler, \"_key\", null);\n\nexport { LocalStorageHandler as default };","map":null,"metadata":{},"sourceType":"module"}