{"ast":null,"code":"import _JSON$stringify from \"@babel/runtime-corejs2/core-js/json/stringify\";\nimport _classCallCheck from \"@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\n\n/*\r\nUma classe para trabalhar com LocalStorage\r\n*/\nvar LocalStorageHandler =\n/*#__PURE__*/\nfunction () {\n  function LocalStorageHandler() {\n    _classCallCheck(this, LocalStorageHandler);\n  } //static _ls = localStorage;\n\n  /**\r\n   * @method get\r\n   * @param key {String} Item key\r\n   * @return {String|Object|Null}\r\n   */\n\n\n  _createClass(LocalStorageHandler, null, [{\n    key: \"get\",\n    value: function get(key) {\n      try {\n        return JSON.parse(this._ls.getItem(key));\n      } catch (e) {\n        return this._ls.getItem(key);\n      }\n    }\n    /**\r\n     * @method set\r\n     * @param key {String} Item key\r\n     * @param val {String|Object} Item value\r\n     * @return {String|Object} The value of the item just set\r\n     */\n\n  }, {\n    key: \"set\",\n    value: function set(key, val) {\n      this._ls.setItem(key, _JSON$stringify(val));\n\n      return this.get(key);\n    }\n    /**\r\n     * @method key\r\n     * @param index {Number} Item index\r\n     * @return {String|Null} The item key if found, null if not\r\n     */\n\n  }, {\n    key: \"key\",\n    value: function key(index) {\n      if (typeof index === \"number\") {\n        return this._ls.key(index);\n      }\n    }\n    /**\r\n     * @method data\r\n     * @return {Array|Null} An array containing all items in localStorage through key{string}-value{String|Object} pairs\r\n     */\n\n  }, {\n    key: \"data\",\n    value: function data() {\n      var i = 0;\n      var data = [];\n\n      while (this._ls.key(i)) {\n        data[i] = [this._ls.key(i), this.get(this._ls.key(i))];\n        i++;\n      }\n\n      return data.length ? data : null;\n    }\n  }, {\n    key: \"getDataByKey\",\n    value: function getDataByKey(key) {\n      if (localStorage.getItem(key) === null) {\n        return \"KEY_NOT_EXISTS\";\n      }\n    }\n    /**\r\n     * @method remove\r\n     * @param keyOrIndex {String|Number} Item key or index (which will be converted to key anyway)\r\n     * @return {Boolean} True if the key was found before deletion, false if not\r\n     */\n\n  }, {\n    key: \"remove\",\n    value: function remove(keyOrIndex) {\n      var result = false;\n      var key = typeof keyOrIndex === \"number\" ? this.key(keyOrIndex) : keyOrIndex;\n\n      if (key in this._ls) {\n        result = true;\n\n        this._ls.removeItem(key);\n      }\n\n      return result;\n    }\n    /**\r\n     * @method clear\r\n     * @return {Number} The total of items removed\r\n     */\n\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      var len = this._ls.length;\n\n      this._ls.clear();\n\n      return len;\n    }\n  }]);\n\n  return LocalStorageHandler;\n}();\n\n_defineProperty(LocalStorageHandler, \"_ls\", null);\n\nexport { LocalStorageHandler as default };","map":{"version":3,"sources":["E:\\delivery-rsvtelecom-com-br\\components\\LocalStorageHandler.js"],"names":["LocalStorageHandler","key","JSON","parse","_ls","getItem","e","val","setItem","get","index","i","data","length","localStorage","keyOrIndex","result","removeItem","len","clear"],"mappings":";;;;;AAAA;;;IAGqBA,mB;;;AAInB,iCAAc;AAAA;AAAE,G,CAGhB;;AACA;;;;;;;;;wBAKWC,G,EAAK;AACd,UAAI;AACF,eAAOC,IAAI,CAACC,KAAL,CAAW,KAAKC,GAAL,CAASC,OAAT,CAAiBJ,GAAjB,CAAX,CAAP;AACD,OAFD,CAEE,OAAOK,CAAP,EAAU;AACV,eAAO,KAAKF,GAAL,CAASC,OAAT,CAAiBJ,GAAjB,CAAP;AACD;AACF;AAED;;;;;;;;;wBAMWA,G,EAAKM,G,EAAK;AACnB,WAAKH,GAAL,CAASI,OAAT,CAAiBP,GAAjB,EAAsB,gBAAeM,GAAf,CAAtB;;AACA,aAAO,KAAKE,GAAL,CAASR,GAAT,CAAP;AACD;AAED;;;;;;;;wBAMWS,K,EAAO;AAChB,UAAI,OAAOA,KAAP,KAAiB,QAArB,EAA+B;AAC7B,eAAO,KAAKN,GAAL,CAASH,GAAT,CAAaS,KAAb,CAAP;AACD;AACF;AAED;;;;;;;2BAIc;AACZ,UAAIC,CAAC,GAAG,CAAR;AACA,UAAIC,IAAI,GAAG,EAAX;;AAEA,aAAO,KAAKR,GAAL,CAASH,GAAT,CAAaU,CAAb,CAAP,EAAwB;AACtBC,QAAAA,IAAI,CAACD,CAAD,CAAJ,GAAU,CAAC,KAAKP,GAAL,CAASH,GAAT,CAAaU,CAAb,CAAD,EAAkB,KAAKF,GAAL,CAAS,KAAKL,GAAL,CAASH,GAAT,CAAaU,CAAb,CAAT,CAAlB,CAAV;AACAA,QAAAA,CAAC;AACF;;AAED,aAAOC,IAAI,CAACC,MAAL,GAAcD,IAAd,GAAqB,IAA5B;AACD;;;iCAEmBX,G,EAAK;AAExB,UAAIa,YAAY,CAACT,OAAb,CAAqBJ,GAArB,MAA8B,IAAlC,EAAwC;AAC1C,eAAO,gBAAP;AACG;AACD;AAID;;;;;;;;2BAMcc,U,EAAY;AACxB,UAAIC,MAAM,GAAG,KAAb;AACA,UAAIf,GAAG,GACL,OAAOc,UAAP,KAAsB,QAAtB,GAAiC,KAAKd,GAAL,CAASc,UAAT,CAAjC,GAAwDA,UAD1D;;AAGA,UAAId,GAAG,IAAI,KAAKG,GAAhB,EAAqB;AACnBY,QAAAA,MAAM,GAAG,IAAT;;AACA,aAAKZ,GAAL,CAASa,UAAT,CAAoBhB,GAApB;AACD;;AAED,aAAOe,MAAP;AACD;AAED;;;;;;;4BAIe;AACb,UAAIE,GAAG,GAAG,KAAKd,GAAL,CAASS,MAAnB;;AACA,WAAKT,GAAL,CAASe,KAAT;;AACA,aAAOD,GAAP;AACD;;;;;;gBAhGkBlB,mB,SAEL,I;;SAFKA,mB","sourcesContent":["/*\r\nUma classe para trabalhar com LocalStorage\r\n*/\r\nexport default class LocalStorageHandler {\r\n\r\n  static _ls =  null;\r\n\r\n  constructor() {}\r\n\r\n  \r\n  //static _ls = localStorage;\r\n  /**\r\n   * @method get\r\n   * @param key {String} Item key\r\n   * @return {String|Object|Null}\r\n   */\r\n  static get(key) {\r\n    try {\r\n      return JSON.parse(this._ls.getItem(key));\r\n    } catch (e) {\r\n      return this._ls.getItem(key);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method set\r\n   * @param key {String} Item key\r\n   * @param val {String|Object} Item value\r\n   * @return {String|Object} The value of the item just set\r\n   */\r\n  static set(key, val) {\r\n    this._ls.setItem(key, JSON.stringify(val));\r\n    return this.get(key);\r\n  }\r\n\r\n  /**\r\n   * @method key\r\n   * @param index {Number} Item index\r\n   * @return {String|Null} The item key if found, null if not\r\n   */\r\n\r\n  static key(index) {\r\n    if (typeof index === \"number\") {\r\n      return this._ls.key(index);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @method data\r\n   * @return {Array|Null} An array containing all items in localStorage through key{string}-value{String|Object} pairs\r\n   */\r\n  static data() {\r\n    var i = 0;\r\n    var data = [];\r\n\r\n    while (this._ls.key(i)) {\r\n      data[i] = [this._ls.key(i), this.get(this._ls.key(i))];\r\n      i++;\r\n    }\r\n\r\n    return data.length ? data : null;\r\n  }\r\n\r\n  static getDataByKey(key) {\r\n    \r\n   if (localStorage.getItem(key) === null) {\r\n\treturn \"KEY_NOT_EXISTS\";\r\n   }\r\n  }\r\n\r\n\r\n\r\n  /**\r\n   * @method remove\r\n   * @param keyOrIndex {String|Number} Item key or index (which will be converted to key anyway)\r\n   * @return {Boolean} True if the key was found before deletion, false if not\r\n   */\r\n\r\n  static remove(keyOrIndex) {\r\n    var result = false;\r\n    var key =\r\n      typeof keyOrIndex === \"number\" ? this.key(keyOrIndex) : keyOrIndex;\r\n\r\n    if (key in this._ls) {\r\n      result = true;\r\n      this._ls.removeItem(key);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * @method clear\r\n   * @return {Number} The total of items removed\r\n   */\r\n  static clear() {\r\n    var len = this._ls.length;\r\n    this._ls.clear();\r\n    return len;\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}